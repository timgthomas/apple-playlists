{"mappings":"AAAA,QAAQ,CAAC,gBAAgB,CAAC,CAAa,kBAAQ,CAAC;IAC9C,MAAM,CAAC,KAAK,CAAC,CAAK,MAAE,CAAC;QAEnB,MAAM,EAAE,CAAE;YAEN,WAAW,IAAG,CAAC;YACjB,MAAM,EAAE,YAAY,CAAC,OAAO,CAAC,CAAW,aAAG,KAAK,CAAC,CAAG,OAAK,CAAC,CAAC,EAAE,MAAM,CAAC,OAAO;QAC7E,CAAC;YACG,WAAW,EAAC,cAAc,CAAE,CAAC;YAC/B,YAAY,CAAC,OAAO,CAAC,CAAW,YAAE,cAAc,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAG;QAC3E,CAAC;YAEG,iBAAiB,IAAG,CAAC;YACvB,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI;YAC3C,MAAM,CAAC,MAAM,CAAC,YAAY,CACvB,MAAM,EAAE,CAAC,IAAM,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,OAAO,CAAG,IAAE,QAAQ,CAAC,MAAM;cAClE,GAAG,EAAE,CAAC,IAAM,CAAC;uBAAI,CAAC;oBAAE,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;gBAAE,CAAC;;QACtE,CAAC;YACG,MAAM,IAAG,CAAC;YACZ,GAAG,CAAC,gBAAgB,GAAG,MAAM,CAC1B,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAO,SACjD,GAAG,GAAI,IAAI,EAAE,SAAS,KAAQ,CAAC;oBAAC,IAAI;oBAAE,SAAS;gBAAC,CAAC;;YACpD,MAAM,CAAC,CAAC;gBACN,CAAC;oBACC,IAAI,EAAE,CAAW;oBACjB,SAAS,EAAE,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,GAAK,CAAC,CAAC,UAAU;;gBAC9D,CAAC;mBACE,gBAAgB;YACrB,CAAC,CAAC,MAAM,EAAE,CAAC,GAAK,CAAC,CAAC,SAAS,CAAC,MAAM;;QACpC,CAAC;QAED,SAAS,EAAC,CAAC,CAAC,EAAE,GAAE,IAAI,EAAC,CAAC,EAAE,CAAC;YACvB,MAAM,EAAE,oCAAoC,EAAE,IAAI,CAAC,IAAI,EAAE,EAAE;QAC7D,CAAC;QAED,cAAc,EAAC,CAAC,CAAC,EAAE,EAAC,CAAC,EAAE,CAAC;YACtB,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,GAC9B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,UAAU,GAAK,UAAU,KAAK,EAAE;;iBAE5E,IAAI,CAAC,WAAW,GAAG,CAAC;mBAAI,IAAI,CAAC,WAAW;gBAAE,EAAE;YAAC,CAAC;QAElD,CAAC;IAEH,CAAC;AACH,CAAC","sources":["app.js"],"sourcesContent":["document.addEventListener('alpine:init', () => {\n  Alpine.store('app', {\n\n    filter: '',\n\n    get favoriteIds() {\n      return (localStorage.getItem('favorites')?.split(',') ?? []).filter(Boolean)\n    },\n    set favoriteIds(newFavoriteIds) {\n      localStorage.setItem('favorites', newFavoriteIds.filter(Boolean).join(','));\n    },\n\n    get filteredPlaylists() {\n      let filter = this.filter.toLowerCase().trim()\n      return window.playlistData\n        .filter((p) => !filter || p.slug.replace(/-/g, ' ').includes(filter))\n        .map((p) => ({ ...p, isFavorite: this.favoriteIds.includes(p.id) }))\n    },\n    get groups() {\n      let groupedPlaylists = Object\n        .entries(_.groupBy(this.filteredPlaylists, 'group'))\n        .map(([ name, playlists ]) => ({ name, playlists }))\n      return [\n        {\n          name: 'Favorites',\n          playlists: this.filteredPlaylists.filter((p) => p.isFavorite),\n        },\n        ...groupedPlaylists,\n      ].filter((g) => g.playlists.length)\n    },\n\n    buildHref({ id, slug }) {\n      return `https://music.apple.com/us/playlist/${slug}/pl.${id}`\n    },\n\n    toggleFavorite({ id }) {\n      if (this.favoriteIds.includes(id)) {\n        this.favoriteIds = this.favoriteIds.filter((favoriteId) => favoriteId !== id)\n      } else {\n        this.favoriteIds = [ ...this.favoriteIds, id ]\n      }\n    },\n\n  })\n})\n"],"names":[],"version":3,"file":"index.d3334858.js.map","sourceRoot":"/__parcel_source_root/"}